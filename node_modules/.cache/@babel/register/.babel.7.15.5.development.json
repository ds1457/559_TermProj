{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend\",\"filename\":\"/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend/src/server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.15.5": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend",
      "filename": "/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend/src/server.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend/src/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nconst app = express();\napp.use(bodyParser.json());\n\nconst withDB = async (operations, res) => {\n  try {\n    const client = await MongoClient.connect('mongodb://localhost:27017', {\n      useNewUrlParser: true\n    });\n    const db = client.db('my-blog');\n    await operations(db);\n    client.close();\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error connecting to db',\n      error\n    });\n  }\n};\n\napp.get('/api/articles/:name', async (req, res) => {\n  withDB(async db => {\n    const articleName = req.params.name;\n    const articleInfo = await db.collection('articles').findOne({\n      name: articleName\n    });\n    res.status(200).json(articleInfo);\n  }, res);\n});\napp.post('/api/articles/:name/upvote', async (req, res) => {\n  withDB(async db => {\n    const articleName = req.params.name;\n    const articleInfo = await db.collection('articles').findOne({\n      name: articleName\n    });\n    await db.collection('articles').updateOne({\n      name: articleName\n    }, {\n      '$set': {\n        upvotes: articleInfo.upvotes + 1\n      }\n    });\n    const updatedArticleInfo = await db.collection('articles').findOne({\n      name: articleName\n    });\n    res.status(200).json(updatedArticleInfo);\n  }, res);\n});\napp.post('/api/articles/:name/add-comment', (req, res) => {\n  const {\n    username,\n    text\n  } = req.body;\n  const articleName = req.params.name;\n  withDB(async db => {\n    const articleInfo = await db.collection('articles').findOne({\n      name: articleName\n    });\n    await db.collection('articles').updateOne({\n      name: articleName\n    }, {\n      '$set': {\n        comments: articleInfo.comments.concat({\n          username,\n          text\n        })\n      }\n    });\n    const updatedArticleInfo = await db.collection('articles').findOne({\n      name: articleName\n    });\n    res.status(200).json(updatedArticleInfo);\n  }, res);\n});\napp.listen(8000, () => console.log('Listening on port 8000'));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwiYm9keVBhcnNlciIsIk1vbmdvQ2xpZW50IiwiYXBwIiwidXNlIiwianNvbiIsIndpdGhEQiIsIm9wZXJhdGlvbnMiLCJyZXMiLCJjbGllbnQiLCJjb25uZWN0IiwidXNlTmV3VXJsUGFyc2VyIiwiZGIiLCJjbG9zZSIsImVycm9yIiwic3RhdHVzIiwibWVzc2FnZSIsImdldCIsInJlcSIsImFydGljbGVOYW1lIiwicGFyYW1zIiwibmFtZSIsImFydGljbGVJbmZvIiwiY29sbGVjdGlvbiIsImZpbmRPbmUiLCJwb3N0IiwidXBkYXRlT25lIiwidXB2b3RlcyIsInVwZGF0ZWRBcnRpY2xlSW5mbyIsInVzZXJuYW1lIiwidGV4dCIsImJvZHkiLCJjb21tZW50cyIsImNvbmNhdCIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE9BQVAsTUFBb0IsU0FBcEI7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLGFBQXZCO0FBQ0EsU0FBU0MsV0FBVCxRQUE0QixTQUE1QjtBQUVBLE1BQU1DLEdBQUcsR0FBR0gsT0FBTyxFQUFuQjtBQUVBRyxHQUFHLENBQUNDLEdBQUosQ0FBUUgsVUFBVSxDQUFDSSxJQUFYLEVBQVI7O0FBRUEsTUFBTUMsTUFBTSxHQUFHLE9BQU9DLFVBQVAsRUFBbUJDLEdBQW5CLEtBQTJCO0FBQ3RDLE1BQUk7QUFDQSxVQUFNQyxNQUFNLEdBQUcsTUFBTVAsV0FBVyxDQUFDUSxPQUFaLENBQW9CLDJCQUFwQixFQUFpRDtBQUFFQyxNQUFBQSxlQUFlLEVBQUU7QUFBbkIsS0FBakQsQ0FBckI7QUFDQSxVQUFNQyxFQUFFLEdBQUdILE1BQU0sQ0FBQ0csRUFBUCxDQUFVLFNBQVYsQ0FBWDtBQUVBLFVBQU1MLFVBQVUsQ0FBQ0ssRUFBRCxDQUFoQjtBQUVBSCxJQUFBQSxNQUFNLENBQUNJLEtBQVA7QUFDSCxHQVBELENBT0UsT0FBT0MsS0FBUCxFQUFjO0FBQ1pO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LE1BQUFBLElBQUksRUFBRUY7QUFBUixLQUFsQyxDQUFqQztBQUVBWCxJQUFBQSxHQUFHLENBQUNPLE1BQUosQ0FBVyxHQUFYLEVBQWdCVixJQUFoQixDQUFxQnVCLGtCQUFyQjtBQUNILEdBVkssRUFVSHBCLEdBVkcsQ0FBTjtBQVdILENBZkQ7QUFpQkFMLEdBQUcsQ0FBQytCLE1BQUosQ0FBVyxJQUFYLEVBQWlCLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHdCQUFaLENBQXZCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9qb2NlbHluL0Rlc2t0b3AvNTU5L0ZpbmFsUHJvamVjdC9teS1ibG9nLWJhY2tlbmQvc3JjLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0IHsgTW9uZ29DbGllbnQgfSBmcm9tICdtb25nb2RiJztcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcblxuY29uc3Qgd2l0aERCID0gYXN5bmMgKG9wZXJhdGlvbnMsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IE1vbmdvQ2xpZW50LmNvbm5lY3QoJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcnLCB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZSB9KTtcbiAgICAgICAgY29uc3QgZGIgPSBjbGllbnQuZGIoJ215LWJsb2cnKTtcbiAgICBcbiAgICAgICAgYXdhaXQgb3BlcmF0aW9ucyhkYik7XG4gICAgXG4gICAgICAgIGNsaWVudC5jbG9zZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0Vycm9yIGNvbm5lY3RpbmcgdG8gZGInLCBlcnJvciB9KTtcbiAgICB9XG59XG5cbmFwcC5nZXQoJy9hcGkvYXJ0aWNsZXMvOm5hbWUnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB3aXRoREIoYXN5bmMgKGRiKSA9PiB7XG4gICAgICAgIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuXG4gICAgICAgIGNvbnN0IGFydGljbGVJbmZvID0gYXdhaXQgZGIuY29sbGVjdGlvbignYXJ0aWNsZXMnKS5maW5kT25lKHsgbmFtZTogYXJ0aWNsZU5hbWUgfSlcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oYXJ0aWNsZUluZm8pO1xuICAgIH0sIHJlcyk7XG59KVxuXG5hcHAucG9zdCgnL2FwaS9hcnRpY2xlcy86bmFtZS91cHZvdGUnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB3aXRoREIoYXN5bmMgKGRiKSA9PiB7XG4gICAgICAgIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuICAgIFxuICAgICAgICBjb25zdCBhcnRpY2xlSW5mbyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2FydGljbGVzJykuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0pO1xuICAgICAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdhcnRpY2xlcycpLnVwZGF0ZU9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0sIHtcbiAgICAgICAgICAgICckc2V0Jzoge1xuICAgICAgICAgICAgICAgIHVwdm90ZXM6IGFydGljbGVJbmZvLnVwdm90ZXMgKyAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRBcnRpY2xlSW5mbyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2FydGljbGVzJykuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0pO1xuICAgIFxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih1cGRhdGVkQXJ0aWNsZUluZm8pO1xuICAgIH0sIHJlcyk7XG59KTtcblxuYXBwLnBvc3QoJy9hcGkvYXJ0aWNsZXMvOm5hbWUvYWRkLWNvbW1lbnQnLCAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCB7IHVzZXJuYW1lLCB0ZXh0IH0gPSByZXEuYm9keTtcbiAgICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZTtcblxuICAgIHdpdGhEQihhc3luYyAoZGIpID0+IHtcbiAgICAgICAgY29uc3QgYXJ0aWNsZUluZm8gPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCdhcnRpY2xlcycpLmZpbmRPbmUoeyBuYW1lOiBhcnRpY2xlTmFtZSB9KTtcbiAgICAgICAgYXdhaXQgZGIuY29sbGVjdGlvbignYXJ0aWNsZXMnKS51cGRhdGVPbmUoeyBuYW1lOiBhcnRpY2xlTmFtZSB9LCB7XG4gICAgICAgICAgICAnJHNldCc6IHtcbiAgICAgICAgICAgICAgICBjb21tZW50czogYXJ0aWNsZUluZm8uY29tbWVudHMuY29uY2F0KHsgdXNlcm5hbWUsIHRleHQgfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdXBkYXRlZEFydGljbGVJbmZvID0gYXdhaXQgZGIuY29sbGVjdGlvbignYXJ0aWNsZXMnKS5maW5kT25lKHsgbmFtZTogYXJ0aWNsZU5hbWUgfSk7XG5cbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24odXBkYXRlZEFydGljbGVJbmZvKTtcbiAgICB9LCByZXMpO1xufSk7XG5cbmFwcC5saXN0ZW4oODAwMCwgKCkgPT4gY29uc29sZS5sb2coJ0xpc3RlbmluZyBvbiBwb3J0IDgwMDAnKSk7Il19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "bodyParser",
        "MongoClient",
        "app",
        "use",
        "json",
        "withDB",
        "operations",
        "res",
        "client",
        "connect",
        "useNewUrlParser",
        "db",
        "close",
        "error",
        "status",
        "message",
        "get",
        "req",
        "articleName",
        "params",
        "name",
        "articleInfo",
        "collection",
        "findOne",
        "post",
        "updateOne",
        "upvotes",
        "updatedArticleInfo",
        "username",
        "text",
        "body",
        "comments",
        "concat",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/jocelyn/Desktop/559/FinalProject/my-blog-backend/src/",
      "sourcesContent": [
        "import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\n\nconst app = express();\n\napp.use(bodyParser.json());\n\nconst withDB = async (operations, res) => {\n    try {\n        const client = await MongoClient.connect('mongodb://localhost:27017', { useNewUrlParser: true });\n        const db = client.db('my-blog');\n    \n        await operations(db);\n    \n        client.close();\n    } catch (error) {\n        res.status(500).json({ message: 'Error connecting to db', error });\n    }\n}\n\napp.get('/api/articles/:name', async (req, res) => {\n    withDB(async (db) => {\n        const articleName = req.params.name;\n\n        const articleInfo = await db.collection('articles').findOne({ name: articleName })\n        res.status(200).json(articleInfo);\n    }, res);\n})\n\napp.post('/api/articles/:name/upvote', async (req, res) => {\n    withDB(async (db) => {\n        const articleName = req.params.name;\n    \n        const articleInfo = await db.collection('articles').findOne({ name: articleName });\n        await db.collection('articles').updateOne({ name: articleName }, {\n            '$set': {\n                upvotes: articleInfo.upvotes + 1,\n            },\n        });\n        const updatedArticleInfo = await db.collection('articles').findOne({ name: articleName });\n    \n        res.status(200).json(updatedArticleInfo);\n    }, res);\n});\n\napp.post('/api/articles/:name/add-comment', (req, res) => {\n    const { username, text } = req.body;\n    const articleName = req.params.name;\n\n    withDB(async (db) => {\n        const articleInfo = await db.collection('articles').findOne({ name: articleName });\n        await db.collection('articles').updateOne({ name: articleName }, {\n            '$set': {\n                comments: articleInfo.comments.concat({ username, text }),\n            },\n        });\n        const updatedArticleInfo = await db.collection('articles').findOne({ name: articleName });\n\n        res.status(200).json(updatedArticleInfo);\n    }, res);\n});\n\napp.listen(8000, () => console.log('Listening on port 8000'));"
      ]
    },
    "sourceType": "module",
    "mtime": 1555540938000
  }
}